/*   bool loadParseTable(const std::string& filename) {
      std::ifstream file(filename);
      if (!file.is_open()) {
        std::cerr << "Error: Could not open parse table file.\n";
        return false;
      }

      std::string line;
      while (getline(file, line)) {
        if (line.empty()) continue;

        size_t firstOpen = line.find('(');
        size_t firstClose = line.find(')', firstOpen);
        size_t secondOpen = line.find('(', firstClose + 1); // Look for the second '(' after the first ')'
        size_t secondClose = line.find(')', secondOpen);

        if (firstOpen == std::string::npos || firstClose == std::string::npos ||
            secondOpen == std::string::npos || secondClose == std::string::npos) {
          std::cerr << "Error: Invalid parse table line format: " << line << '\n';
          continue;
        }

        std::string keyPairStr = line.substr(firstOpen + 1, firstClose - firstOpen - 1);
        std::string nonTerminal;
        std::string terminal;

        size_t commaPos = keyPairStr.find(',');
        if (commaPos != std::string::npos) {
          nonTerminal = keyPairStr.substr(0, commaPos);
          size_t startTerminal = commaPos + 1;
          size_t endTerminal = keyPairStr.length();
          terminal = keyPairStr.substr(startTerminal, endTerminal - startTerminal);

          // Remove surrounding quotes from terminal if present
          if (terminal.length() > 2 && terminal.front() == '"' && terminal.back() == '"') {
            terminal = terminal.substr(1, terminal.length() - 2);
          }
          nonTerminal = trim(nonTerminal);
          terminal = trim(terminal);

          nonTerminals.insert(nonTerminal);
          terminals.insert(terminal);
        } else {
          std::cerr << "Error: Invalid key pair format in line: " << line << '\n';
          continue;
        }

        std::string productionStr = line.substr(secondOpen + 1, secondClose - secondOpen - 1);
        std::vector<std::string> production;
        std::stringstream ss(productionStr);
        std::string symbol;
        while (getline(ss, symbol, ',')) {
          production.push_back(trim(symbol));
        }

        table[nonTerminal][terminal] = production;

        if (startSymbol.empty()) {
          startSymbol = nonTerminal;
        }
      }

      logGrammarSymbols();
      file.close();
      return !startSymbol.empty();
    }
*/